buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.20")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

repositories {
    mavenCentral()
    maven {
        url = 'https://repo.spring.io/milestone'
    }
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'io.spring.javaformat'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.example.poc'
    version = '0.3.0-SNAPSHOT'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    repositories {
        mavenLocal()
        maven {
            url = 'https://repo.spring.io/snapshot'
        }

        maven {
            url = 'https://repo.spring.io/milestone'
        }

        maven {
            url = 'http://repo.maven.apache.org/maven2'
        }
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.20'

        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        compileOnly 'org.projectlombok:lombok'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        annotationProcessor 'org.projectlombok:lombok'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    sourceCompatibility = '11'

    checkstyle {
        toolVersion = "8.29"
    }

    test {
        useJUnitPlatform()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}
